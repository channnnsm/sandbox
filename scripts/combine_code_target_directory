#!/usr/bin/env python3
import os
import fnmatch
import subprocess
from pathlib import Path

def load_gitignore_patterns():
    """
    .gitignoreからコメント行と空行を除いたパターンを読み込み、
    各パターンに"./"を接頭辞として追加したリストを返す。
    """
    patterns = []
    gitignore_file = Path('.gitignore')
    if gitignore_file.is_file():
        content = gitignore_file.read_text(encoding='utf-8')
        for line in content.splitlines():
            line = line.strip()
            if not line or line.startswith('#'):
                continue
            # gitignoreの各行に"./"を付与しておく
            patterns.append("./" + line)
    return patterns

def should_ignore(rel_path: Path, ignore_patterns):
    """
    rel_pathは現在のディレクトリからの相対パス（例: "a/b.py"）です。
    先頭に"./"を付与して、.gitignore由来のパターンとfnmatchで比較します。
    一致する場合、Trueを返してスキップ対象とします。
    """
    check_path = "./" + rel_path.as_posix()
    for pattern in ignore_patterns:
        if fnmatch.fnmatch(check_path, pattern):
            return True
    return False

# ⭐️combine_code関数に開始ディレクトリを指定する引数(target_folder)を追加
def combine_code(target_folder="."):
    print("コードを組み合わせています...")
    output_path = Path("files.md")

    # 既存のfiles.mdがあれば削除
    if output_path.exists():
        output_path.unlink()

    # 最初に"# README.md"を書き込み、README.mdが存在すればその内容を追記する
    # さらに、package.json、pyproject.yamlが存在すれば読み込んで追加する
    with output_path.open("w", encoding="utf-8") as outf:
        outf.write("# README.md\n")
        readme_file = Path("README.md")
        if readme_file.is_file():
            outf.write(
                f"<content>\n{readme_file.read_text(encoding='utf-8')}\n</content>\n"
            )
        
        package_file = Path("package.json")
        if package_file.is_file():
            outf.write("\n\n# package.json\n")
            outf.write(f"<content>\n{package_file.read_text(encoding='utf-8')}\n</content>\n")
        
        pyproject_file = Path("pyproject.yaml")
        if pyproject_file.is_file():
            outf.write("\n\n# pyproject.yaml\n")
            outf.write(f"<content>\n{pyproject_file.read_text(encoding='utf-8')}\n</content>\n")

    # .gitignoreから無視するパターンを読み込む
    ignore_patterns = load_gitignore_patterns()

    # 対象とする拡張子のセット
    valid_extensions = {".ts", ".tsx", ".svelte", ".prisma", ".py"}

    # ⭐️指定フォルダ以下（target_folder）を再帰的に探索
    # os.walkを使って、探索中にnode_modulesと.venvをスキップする
    for root, dirs, files in os.walk(target_folder):
        # 除外ディレクトリのリスト
        dirs[:] = [d for d in dirs if d not in {"node_modules", ".venv"}]
        for file in files:
            file_path = Path(root) / file
            if file_path.suffix in valid_extensions:
                try:
                    rel_path = file_path.relative_to(Path(".").resolve())
                except ValueError:
                    rel_path = file_path
                if should_ignore(rel_path, ignore_patterns):
                    continue
                with file_path.open("r", encoding="utf-8", errors="ignore") as f:
                    content = f.read()
                with output_path.open("a", encoding="utf-8") as outf:
                    outf.write(f"\n\n# {file_path}\n")
                    outf.write(f"<content>\n{content}\n</content>\n")

def copy_to_clipboard(file_path):
    """ファイルの内容をクリップボードにコピーする"""
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
        # macOSのpbcopyコマンドを使用してクリップボードにコピー
        process = subprocess.Popen(['pbcopy'], stdin=subprocess.PIPE)
        process.communicate(content.encode('utf-8'))
        return True
    except Exception as e:
        print(f"クリップボードへのコピー中にエラーが発生しました: {e}")
        return False

if __name__ == "__main__":
    # ⭐️指定したフォルダだけを対象にする場合（例: "target_folder"）
    combine_code("target_folder")
    output_path = Path("files.md")
    if output_path.exists():
        # ファイルの文字数を計算
        file_content = output_path.read_text(encoding='utf-8')
        char_count = len(file_content)
        
        if copy_to_clipboard(output_path):
            print(f"{output_path}の内容をクリップボードにコピーしました。")
            print(f"合計文字数: {char_count}文字")
        else:
            print("クリップボードへのコピーに失敗しました。")
            print(f"合計文字数: {char_count}文字")
